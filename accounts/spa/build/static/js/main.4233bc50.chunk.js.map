{"version":3,"sources":["atomic/atoms/Loader.tsx","atomic/atoms/Button.tsx","atomic/organisms/layouts/Header.tsx","atomic/templates/homepage/HomepageTemplate.tsx","pages/homepage/Homepage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ldsDualRingKeyframe","keyframes","StyledSpan","styled","span","props","centered","smallLoader","largeLoader","StyledLoader","small","Loader","StyledButton","button","block","Button","children","type","variant","outlined","size","disabled","loading","onClick","OuterDiv","div","Header","HomepageTemplate","welcomeText","Fragment","Homepage","App","path","exact","component","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+5BAGA,IAAMA,EAAsBC,YAAH,KAanBC,EAAaC,IAAOC,KAAV,KACA,SAAAC,GAAK,OAAKA,EAAMC,SAAW,WAAa,WASlDC,EACK,OADLA,EAEM,OAFNA,EAGe,MAGfC,EACK,OADLA,EAEM,OAFNA,EAGe,MAGfC,EAAeN,IAAOC,KAAV,KAKD,SAAAC,GAAK,OAAKA,EAAMK,MAAQH,EAAoBC,KAC3C,SAAAH,GAAK,OAAKA,EAAMK,MAAQH,EAAqBC,KAE7C,SAAAH,GAAK,OAAKA,EAAMK,MAAQH,EAA8BC,IAEnDR,GAiBNW,EARiB,SAAAN,GAC5B,OACI,kBAACH,EAAD,CAAYI,SAAUD,EAAMC,UACxB,kBAACG,EAAD,CAAcC,MAAOL,EAAMK,U,wFCpDvC,IAAME,EAAeT,IAAOU,OAAV,KACL,SAAAR,GAAK,OAAIA,EAAMS,MAAQ,OAAS,WAmC9BC,EAhBiB,SAAC,GAA6F,IAA5FC,EAA2F,EAA3FA,SAA6BC,GAA8D,EAAjFC,QAAiF,EAAxEC,SAAwE,EAA9DF,MAAuBH,GAAuC,EAAxDM,KAAwD,EAAvCN,OAAOO,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QAE5G,OACI,kBAACX,EAAD,CAAcK,KAAMA,EAChBH,MAAOA,EACPO,SAAUA,EACVE,QAASA,GAERP,EACAM,GACG,kBAAC,EAAD,CAAQZ,OAAK,M,sHClC7B,IAAMc,EAAWrB,IAAOsB,IAAV,KAkBCC,EAbA,WACX,OACI,kBAACF,EAAD,KACI,kBAAC,EAAD,CACIN,QAAQ,UACRD,KAAK,UAFT,UCMGU,EAX2B,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACxC,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,EAAD,MACA,6BACKD,KCHFE,EANE,WACb,OACI,kBAAC,EAAD,CAAkBF,YAAY,oCCavBG,EAZc,WASzB,OANI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAUK,GAAG,QCCLC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCTvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KAEQ,kBAAC,IAAD,KACI,kBAAC,EAAD,QAIZC,SAASC,eAAe,SDiHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4233bc50.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst ldsDualRingKeyframe = keyframes`\n    0% {\n        transform: rotate(0deg);\n      }\n      100% {\n        transform: rotate(360deg);\n      }\n`;\n\ntype StyledDivProps = {\n    centered?: boolean;\n};\n\nconst StyledSpan = styled.span<StyledDivProps>`\n    position: ${props => (props.centered ? 'absolute' : 'unset')};\n    left: calc(50% - 32px);\n    top: 30%;\n`;\n\ntype StyledLoaderProps = {\n    small?: boolean;\n};\n\nconst smallLoader = {\n    width: '15px',\n    height: '15px',\n    borderThickness: '3px',\n};\n\nconst largeLoader = {\n    width: '64px',\n    height: '64px',\n    borderThickness: '6px',\n};\n\nconst StyledLoader = styled.span<StyledLoaderProps>`\n    display: inline-block;\n    &:after {\n        content: ' ';\n        display: block;\n        width: ${props => (props.small ? smallLoader.width : largeLoader.width)};\n        height: ${props => (props.small ? smallLoader.height : largeLoader.height)};\n        border-radius: 50%;\n        border: ${props => (props.small ? smallLoader.borderThickness : largeLoader.borderThickness)} solid black;\n        border-color: black transparent black transparent;\n        animation: ${ldsDualRingKeyframe} 1.2s linear infinite;\n    }\n`;\n\ntype Props = {\n    centered?: boolean;\n    small?: boolean;\n};\n\nconst Loader: React.FC<Props> = props => {\n    return (\n        <StyledSpan centered={props.centered}>\n            <StyledLoader small={props.small} />\n        </StyledSpan>\n    );\n};\n\nexport default Loader;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Loader from './Loader';\n\ntype StyledButtonProps = {\n    block?: boolean;\n}\n\nconst StyledButton = styled.button<StyledButtonProps>`\n    width: ${props => props.block ? '100%' : 'unset'};\n`;\n\ntype VariantTypes = 'primary' | 'secondary' | 'danger';\ntype Types = 'button' | 'submit' | 'reset';\ntype sizeTypes = 'small' | 'medium' | 'large';\n\ntype Props = {\n    children: any;\n    variant: VariantTypes;\n    type: Types;\n    outlined?: boolean;\n    size?: sizeTypes;\n    block?: boolean;\n    disabled?: boolean;\n    loading?: boolean;\n    onClick?: () => void;\n}\n\nconst Button: React.FC<Props> = ({children, variant, outlined, type, size = 'medium', block, disabled, loading, onClick}) => {\n\n    return (\n        <StyledButton type={type}\n            block={block}\n            disabled={disabled}\n            onClick={onClick}\n        >\n            {children}\n            {loading && (\n                <Loader small />\n            )}\n        </StyledButton>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../../atoms/Button';\n\nconst OuterDiv = styled.div`\n    width: 100%;\n    background-color: grey;\n`;\n\nconst Header = () => {\n    return (\n        <OuterDiv>\n            <Button\n                variant='primary'\n                type=\"button\"\n            >\n                home\n            </Button>\n        </OuterDiv>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport Header from '../../organisms/layouts/Header';\n\ntype Props = {\n    welcomeText: string;\n}\n\nconst HomepageTemplate: React.FC<Props> = ({welcomeText}) => {\n    return (\n        <React.Fragment>\n            <Header />\n            <div>\n                {welcomeText}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default HomepageTemplate;\n","import React from 'react';\nimport HomepageTemplate from '../../atomic/templates/homepage/HomepageTemplate';\n\nconst Homepage = () => {\n    return (\n        <HomepageTemplate welcomeText=\"Hi, the template is installed!\" />\n    );\n};\n\nexport default Homepage;\n","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport Homepage from './pages/homepage/Homepage';\n\ntype Props = {};\n\nconst App: React.FC<Props> = () => {\n\n    const routes = (\n        <Switch>\n            <Route path=\"/\" exact component={Homepage} />\n            <Redirect to=\"/\" />\n        </Switch>\n    );\n\n    return routes;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { Provider } from 'react-redux';\n// import store from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        {/*<Provider store={store}>*/}\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        {/*</Provider>*/}\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}